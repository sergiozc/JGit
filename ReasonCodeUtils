
package tv.mirada.logger;


import org.springframework.web.util.HtmlUtils;

import tv.mirada.confluence.ConfluencePageUpdater;


import java.util.Arrays;

import java.util.List;

import java.util.stream.Collectors;


public class ReasonCodeUtils {


    private static final Logger logger = LoggerFactory.getLogger(ReasonCodeUtils.class);


    /**

     * Given an array of ReasonCode items, builds a string containing a Markdown table of the reason codes.

     *

     * @param reasonCodes The reason codes

     * @return A string containing a Markdown table of the reason codes

     */

    public static String buildMarkdownTable(ReasonCode[] reasonCodes) {


        StringBuilder sb = new StringBuilder();


        // Headers

        sb.append("| Code | Name | Description | Action |\n");

        sb.append("| ---- | ---- | ----------- | ------ |\n");


        // Rows

        for (ReasonCode reasonCode : reasonCodes) {

            List<String> values = Arrays.asList(

                    reasonCode.getCode(),

                    reasonCode.getName(),

                    reasonCode.getDescription(),

                    reasonCode.getAction()

            );

            String row = values.stream().collect(Collectors.joining(" | ", "| ", " |\n"));

            sb.append(row);

        }


        return sb.toString();


    }


    /**

     * Given an array of ReasonCode items, builds a string containing a HTML table of the reason codes.

     *

     * @param reasonCodes The reason codes

     * @return A string containing a HTML table of the reason codes

     */

    public static String buildHtmlTable(ReasonCode[] reasonCodes) {


        StringBuilder sb = new StringBuilder();


        sb.append("<table>");

        sb.append("<tbody>");


        // Headers

        sb.append("<tr>");

        sb.append("<th><p>Code</p></th>");

        sb.append("<th><p>Name</p></th>");

        sb.append("<th><p>Description</p></th>");

        sb.append("<th><p>Action</p></th>");

        sb.append("</tr>");


        // Rows

        for (ReasonCode reasonCode : reasonCodes) {

            List<String> values = Arrays.asList(

                    reasonCode.getCode(),

                    reasonCode.getName(),

                    HtmlUtils.htmlEscape(reasonCode.getDescription()),

                    HtmlUtils.htmlEscape(reasonCode.getAction())

            );


            sb.append("<tr>");


            String row = values.stream()

                    .map(value -> String.format("<td><p>%s</p></td>", value))

                    .collect(Collectors.joining());

            sb.append(row);


            sb.append("</tr>");

        }


        sb.append("</tbody>");

        sb.append("</table>");


        return sb.toString();


    }


    public static void publishToConfluence(String url, String user, String pass, String page, ReasonCode[] errorCodes, ReasonCode[] warnCodes) {


        logger.info("Publish reason codes to Confluence page {} ...", page);

        logger.debug("Confluence url: {}", url);

        logger.debug("Confluence user: {}", user);

        logger.debug("Confluence pass: {}", pass);


        StringBuilder sb = new StringBuilder();


        if (errorCodes != null && errorCodes.length > 0) {

            sb.append("<h2>Error Codes</h2>");

            sb.append(buildHtmlTable(errorCodes));

        }


        if (warnCodes != null && warnCodes.length > 0) {

            sb.append("<h2>Warning Codes</h2>");

            sb.append(buildHtmlTable(warnCodes));

        }


        String html = sb.toString();

        ConfluencePageUpdater.updatePageContent(url, user, pass, page, html);

    }


